MakeVariable = (variable expr) assigns the value of expr to variable, creating the variable if necessary. returns expr
Repeat =  (expr [ command(s) ])	runs command(s) given in the list the value of expr number of times. returns the value of the final command executed (or 0 if no commands are executed). note, the value of the current iteration, starting at 1, is automatically assigned to the variable :repcount so that it can be accessed by the command(s)
DoTimes = ([ variable limit ] [ command(s) ]) runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive. returns the value of the final command executed (or 0 if no commands are executed) .note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
For = ([ variable start end increment ] [ command(s) ])runs command(s) for each value specified in the range, i.e., from (start - end), going by increment. returns the value of the final command executed (or 0 if no commands are executed). note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
If = (expr [ command(s) ]) if expr is not 0, runs the command(s) given in the list. returns the value of the final command executed (or 0 if no commands are executed)
IfElse = (expr [ trueCommand(s) ] [ falseCommand(s) ]) if expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list. returns the value of the final command executed (or 0 if no commands are executed)
MakeUserInstruction = (commandName [ variable(s) ] [ command(s) ]) assigns command(s) given in the second list to commandName using parameters given in first list as variables when commandName is used later in a program, any given values are assigned to variables that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed). returns 1 if command is successfully defined, otherwise 0